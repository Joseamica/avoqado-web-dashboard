name: 🌐 Frontend Monitoring & Performance

on:
  schedule:
    # Run checks every 60 minutes
    - cron: '*/59 * * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of check to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - production
          - staging
          - lighthouse

permissions:
  contents: read
  issues: write

env:
  PRODUCTION_URL: https://dashboardv2.avoqado.io
  STAGING_URL: https://staging.dashboard.avoqado.io

jobs:
  # 🌐 Frontend Health Check Production
  frontend-health-production:
    name: 🌐 Production Frontend Health
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && 
       (github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'production'))

    steps:
      - name: 🔍 Production Frontend Health Check
        id: prod-frontend-health
        run: |
          echo "🔍 Checking production frontend..."

          # Check if site loads with proper headers to bypass Cloudflare bot protection
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code};SIZE:%{size_download};TIME:%{time_total}" \
            -H "User-Agent: Mozilla/5.0 (compatible; AvoqadoHealthCheck/1.0; +https://avoqado.io)" \
            -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" \
            -H "Accept-Language: en-US,en;q=0.5" \
            -L \
            $PRODUCTION_URL || echo "FAILED")

          # Check for successful response (200, 301, 302 are acceptable)
          if [[ $RESPONSE == *"HTTPSTATUS:200"* ]] || [[ $RESPONSE == *"HTTPSTATUS:301"* ]] || [[ $RESPONSE == *"HTTPSTATUS:302"* ]]; then
            echo "✅ Production frontend loads successfully"
            echo "Response: $RESPONSE"
            echo "status=healthy" >> $GITHUB_OUTPUT

            # Extract metrics
            SIZE=$(echo $RESPONSE | sed 's/.*SIZE:\([0-9]*\).*/\1/')
            TIME=$(echo $RESPONSE | sed 's/.*TIME:\([0-9.]*\).*/\1/')
            echo "📊 Page size: $SIZE bytes"
            echo "⏱️ Load time: ${TIME}s"
          else
            echo "❌ Production frontend health check failed"
            echo "Response: $RESPONSE"
            echo "Full curl output for debugging:"
            curl -v -H "User-Agent: Mozilla/5.0 (compatible; AvoqadoHealthCheck/1.0)" -L $PRODUCTION_URL || true
            echo "status=unhealthy" >> $GITHUB_OUTPUT
          fi

      - name: 🔒 Security Headers Check
        if: steps.prod-frontend-health.outputs.status == 'healthy'
        run: |
          echo "🔒 Checking security headers..."

          HEADERS=$(curl -s -I $PRODUCTION_URL)

          # Check for security headers
          if echo "$HEADERS" | grep -qi "strict-transport-security"; then
            echo "✅ HSTS header present"
          else
            echo "⚠️ HSTS header missing"
          fi

          if echo "$HEADERS" | grep -qi "x-frame-options"; then
            echo "✅ X-Frame-Options header present"
          else
            echo "⚠️ X-Frame-Options header missing"
          fi

          if echo "$HEADERS" | grep -qi "content-security-policy"; then
            echo "✅ CSP header present"
          else
            echo "⚠️ Content-Security-Policy header missing"
          fi

      - name: 🎨 Asset Loading Check
        if: steps.prod-frontend-health.outputs.status == 'healthy'
        run: |
          echo "🎨 Checking asset loading..."

          # Check if common assets load
          ASSETS_CHECK=$(curl -s -I $PRODUCTION_URL/assets/ 2>/dev/null | head -1 || echo "No assets endpoint")
          echo "📦 Assets endpoint: $ASSETS_CHECK"

          # Check if favicon loads
          FAVICON_CHECK=$(curl -s -I $PRODUCTION_URL/favicon.ico | head -1 || echo "No favicon")
          echo "🎯 Favicon: $FAVICON_CHECK"

      - name: 🚨 Production Frontend Alert
        if: steps.prod-frontend-health.outputs.status == 'unhealthy'
        run: |
          echo "🚨 PRODUCTION FRONTEND ALERT: Site is down or slow!"
          echo "Time: $(date -u)"
          echo "Site: $PRODUCTION_URL"
          exit 1

  # 🧪 Frontend Health Check Staging
  frontend-health-staging:
    name: 🧪 Staging Frontend Health
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && 
       (github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'staging'))

    steps:
      - name: 🔍 Staging Frontend Health Check
        id: staging-frontend-health
        run: |
          echo "🔍 Checking staging frontend..."

          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code};TIME:%{time_total}" $STAGING_URL || echo "FAILED")

          if [[ $RESPONSE == *"HTTPSTATUS:200"* ]]; then
            echo "✅ Staging frontend loads successfully"
            echo "Response: $RESPONSE"
            echo "status=healthy" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Staging frontend health check failed (non-critical)"
            echo "Response: $RESPONSE"
            echo "status=unhealthy" >> $GITHUB_OUTPUT
          fi

      - name: ⚠️ Staging Frontend Warning
        if: steps.staging-frontend-health.outputs.status == 'unhealthy'
        run: |
          echo "⚠️ STAGING FRONTEND WARNING: Site has issues!"
          echo "Time: $(date -u)"
          echo "Site: $STAGING_URL"
          echo "This is non-critical but should be investigated"

  # 🚀 Lighthouse Performance Audit
  lighthouse-audit:
    name: 🚀 Lighthouse Performance Audit
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && 
       (github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'lighthouse'))

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 📦 Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: 🚀 Run Lighthouse audit on Production
        run: |
          echo "🚀 Running Lighthouse performance audit on production..."

          lhci autorun \
            --upload.target=temporary-public-storage \
            --collect.url=$PRODUCTION_URL \
            --collect.numberOfRuns=3 \
            --assert.assertMatrix.matchingUrlPattern=$PRODUCTION_URL \
            --assert.assertions.categories:performance=0.7 \
            --assert.assertions.categories:accessibility=0.8 \
            --assert.assertions.categories:best-practices=0.8 \
            --assert.assertions.categories:seo=0.8 || echo "Lighthouse audit completed with warnings"

      - name: 📊 Performance Summary
        run: |
          echo "📊 Lighthouse Performance Summary:"
          echo "🎯 Target scores:"
          echo "  - Performance: ≥70"
          echo "  - Accessibility: ≥80"
          echo "  - Best Practices: ≥80"
          echo "  - SEO: ≥80"
          echo ""
          echo "💡 Check the Lighthouse report for detailed recommendations"

  # 🔗 API Connectivity Check
  api-connectivity:
    name: 🔗 API Connectivity Check
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && 
       github.event.inputs.check_type == 'all')

    steps:
      - name: 🔗 Test frontend-to-backend connectivity
        run: |
          echo "🔗 Testing API connectivity..."

          # Test if frontend can reach backend
          # This simulates what the frontend JavaScript would do

          API_URL="https://avoqado-server.onrender.com"

          # Test CORS preflight for a typical API call
          CORS_CHECK=$(curl -s -X OPTIONS \
            -H "Origin: https://dashboardv2.avoqado.io" \
            -H "Access-Control-Request-Method: GET" \
            -H "Access-Control-Request-Headers: Authorization" \
            -I $API_URL/api/auth/me | head -1 || echo "CORS check failed")
            
          echo "🌐 CORS preflight response: $CORS_CHECK"

          # Test basic API endpoint
          API_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -H "Origin: https://dashboardv2.avoqado.io" \
            $API_URL/health || echo "API unreachable")
            
          if [[ $API_RESPONSE == *"HTTPSTATUS:200"* ]]; then
            echo "✅ Frontend can reach backend API"
          else
            echo "❌ Frontend-to-backend connectivity issue"
            echo "Response: $API_RESPONSE"
          fi

  # 📊 Generate Frontend Health Report
  frontend-health-report:
    name: 📊 Frontend Health Report
    runs-on: ubuntu-latest
    needs: [frontend-health-production, frontend-health-staging, api-connectivity]
    if: always() && github.event_name == 'workflow_dispatch'

    steps:
      - name: 📊 Generate frontend health report
        run: |
          echo "# 🌐 Avoqado Frontend Health Report"
          echo "Generated at: $(date -u)"
          echo ""

          echo "## 🏭 Production Frontend Status"
          if [[ "${{ needs.frontend-health-production.result }}" == "success" ]]; then
            echo "✅ Production Frontend: Healthy"
            echo "- Site loads correctly"
            echo "- Security headers configured"
            echo "- Assets loading properly"
          else
            echo "❌ Production Frontend: Issues detected"
            echo "- **URGENT**: Site may be inaccessible"
          fi

          echo ""
          echo "## 🧪 Staging Frontend Status"
          if [[ "${{ needs.frontend-health-staging.result }}" == "success" ]]; then
            echo "✅ Staging Frontend: Healthy"
          else
            echo "⚠️ Staging Frontend: Issues detected"
          fi

          echo ""
          echo "## 🔗 API Connectivity Status"
          if [[ "${{ needs.api-connectivity.result }}" == "success" ]]; then
            echo "✅ Frontend-Backend Connection: Healthy"
          else
            echo "❌ Frontend-Backend Connection: Issues detected"
            echo "- CORS configuration may be broken"
            echo "- Backend API may be unreachable"
          fi

          echo ""
          echo "## 🚀 Performance Notes"
          echo "- Lighthouse audits available on-demand"
          echo "- Security headers monitored"
          echo "- Asset loading verified"
          echo "- CORS configuration checked"

          echo ""
          echo "## 📍 URLs Monitored"
          echo "- Production: https://dashboardv2.avoqado.io"
          echo "- Staging: https://staging.dashboard.avoqado.io"
          echo "- Backend API: https://avoqado-server.onrender.com"
